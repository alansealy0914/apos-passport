{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n    }\n\n    saveToken(token) {\n      localStorage.setItem(\"mean-token\", token);\n      this.token = token;\n    }\n\n    getToken() {\n      if (!this.token) {\n        this.token = localStorage.getItem(\"mean-token\");\n      }\n\n      return this.token;\n    }\n\n    request(method, type, user) {\n      let base$;\n\n      if (method === \"post\") {\n        base$ = this.http.post(`/api/${type}`, user);\n      } else {\n        base$ = this.http.get(`/api/${type}`, {\n          headers: {\n            Authorization: `Bearer ${this.getToken()}`\n          }\n        });\n      }\n\n      const request = base$.pipe(map(data => {\n        if (data.token) {\n          this.saveToken(data.token);\n        }\n\n        return data;\n      }));\n      return request;\n    }\n\n    logout() {\n      this.token = \"\";\n      window.localStorage.removeItem(\"mean-token\");\n      this.router.navigateByUrl(\"/\");\n    }\n\n    getUserDetails() {\n      const token = this.getToken();\n      let payload;\n\n      if (token) {\n        payload = token.split(\".\")[1];\n        payload = window.atob(payload);\n        return JSON.parse(payload);\n      } else {\n        return null;\n      }\n    }\n\n    isLoggedIn() {\n      const user = this.getUserDetails();\n\n      if (user) {\n        return user.exp > Date.now() / 1000;\n      } else {\n        return false;\n      }\n    }\n\n    register(user) {\n      return this.request(\"post\", \"register\", user);\n    }\n\n    login(user) {\n      return this.request(\"post\", \"login\", user);\n    }\n\n    profile() {\n      return this.request(\"get\", \"profile\");\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}